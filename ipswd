#!/bin/bash

# Paths to download files
ipsw_dest_folder="/mnt/ipsw/"  # Don't forget to add trailing slash
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# Hostname
HOSTNAME=$(hostname)

# Arrays to store IPSW file URLs
available_ipsws=("")
loaded_ipsws=("")
load_ipsws=("")

# Check commands are available
if ! command -v wget &> /dev/null; then
    echo "wget command is not found. Please install wget."
    exit 1
fi

if ! command -v sendmail &> /dev/null; then
  echo "sendmail command is not found. Please install sendmail."
  exit 1
fi


# Check if the job is already running
# Create pid file
script_pid="/var/run/${0##*/}.pid"

if [[ -f ${script_pid} ]]; then
    echo "Script is already running"
    exit
else
    touch ${script_pid}  # Create the pid file
fi

# Ensure PID file is removed on program exit.
cleanup() {
    rm -f -- "${script_pid}"
    unset available_ipsws
    unset loaded_ipsws
    unset load_ipsws
    if [ -f "${script_dir}/mail.txt" ]; then
        rm "${script_dir}/mail.txt"
    fi
}

trap cleanup EXIT

# Get the list of IPSW files from Apple
available_ipsws=$(wget --quiet --output-document - http://ax.phobos.apple.com.edgesuite.net/WebObjects/MZStore.woa/wa/com.apple.jingle.appserver.client.MZITunesClientCheck/version | sed -e 's/^[[:space:]]*//' -e 's/<string>//' -e 's/\(<\/string>\)*$//g' | grep -i 'http' | grep -i Restore | grep -ie 'iPhone\|iPad\|iPod' | sort | uniq)

# Previously loaded IPSWs by this script
loaded_ipsws=($(< "${script_dir}/${0##*/}.db"))

IFS=" " read -r -a available_ipsws <<< "$(echo "${available_ipsws[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')"
IFS=" " read -r -a loaded_ipsws <<< "$(echo "${loaded_ipsws[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')"

diff() {
    local array1=("${!1}")
    local array2=("${!2}")
    local diff_array=()

    for item in "${array1[@]}"; do
        if [[ ! " ${array2[@]} " =~ " $item " ]]; then
            diff_array+=("$item")
        fi
    done

    # echo "${diff_array[@]}"   # debug
}

load_ipsws=($(diff available_ipsws[@] loaded_ipsws[@]))

echo "${load_ipsws[*]}"

# Download new files
if [ -n "$load_ipsws" ]; then

    # Create the IPSW folder if it doesn't exist
    if ! mkdir -p "${ipsw_dest_folder}"; then
        echo "Failed to create IPSW folder: ${ipsw_dest_folder}"
        exit 1
    fi

    for ((i=0; i<${#load_ipsws[@]}; i++)); do
        # Download file and retry up to 5 times
        wget --quiet -t 5 -c "${load_ipsws[i]}" --directory-prefix "${ipsw_dest_folder}"
        if [ $? -ne 0 ]; then
            echo "Failed to download file: ${load_ipsws[i]}"
        else
            echo "${load_ipsws[i]}" >> "${script_dir}/${0##*/}.db"
        fi
    done

    # Grant permissions to user
    # chown -R nobody:support "${ipsw_dest_folder}"
    chmod -R 644 "${ipsw_dest_folder}"

    # Build the email content
    printf "date: %s\nfrom: system@pretend.co\nto: support@pretend.co\nsubject: New items were loaded\n\n" "$(date +%d-%m-%y)" >> "${script_dir}/mail.txt"
    printf  "Some new items were found. Don't worry, they are already loaded.\n" >> "${script_dir}/mail.txt"
    printf "%s\n" "${load_ipsws[@]}" >> "${script_dir}/mail.txt"
    printf "\n--\niOS Loader\n" >> "${script_dir}/mail.txt"

    # Send the email
    /usr/sbin/sendmail -f "system@pretend.co" support@pretend.co < "${script_dir}/mail.txt"
    if [ $? -ne 0 ]; then
        echo "Failed to send email"
    fi

else
    exit 1
fi

exit 0
